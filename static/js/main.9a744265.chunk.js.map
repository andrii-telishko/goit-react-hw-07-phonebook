{"version":3,"sources":["components/ContactItem/ContactItem.js","redux/actions.js","redux/operations.js","redux/reducer.js","redux/selectors.js","components/ContactsList/ContactsList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["ContactItem","name","number","className","defaultProps","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","actions","axios","defaults","baseURL","dispatch","get","then","data","catch","error","contact","post","contactId","delete","contactsReducer","createReducer","_","payload","state","filter","id","filterReducer","loadingReducer","reducer","combineReducers","contacts","loading","getFilter","getLoader","getFilteredContacts","createSelector","toLowerCase","includes","ContactsList","this","props","fetchContacts","isLoadingContacts","map","type","onClick","Component","connect","operations","ContactForm","handleChange","e","setState","currentTarget","value","handleSubmit","preventDefault","onSubmit","reset","alert","onChange","target","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a744265.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactItem.scss'\r\n\r\nconst ContactItem = ({name,number}) => {\r\n    return (<>\r\n        <span className='contact-name'>{name}: </span>\r\n        <span className='contact-number'>{number}</span>\r\n    </>);\r\n};\r\n\r\nContactItem.propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string\r\n}\r\n\r\nContactItem.defaultProps = {\r\n    name: \"Mickey Mouse\",\r\n    number: 123456789\r\n};\r\n\r\nexport default ContactItem","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactsRequest = createAction('phonebook/fetchContactsRequest');\r\nconst fetchContactsSuccess = createAction('phonebook/fetchContactsSuccess');\r\nconst fetchContactsError = createAction('phonebook/fetchContactsError');\r\n\r\nconst addContactRequest = createAction('phonebook/addContactRequest');\r\nconst addContactSuccess = createAction('phonebook/addContactSuccess');\r\nconst addContactError = createAction('phonebook/addContactError');\r\n\r\nconst deleteContactRequest = createAction('phonebook/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('phonebook/deleteContactSuccess');\r\nconst deleteContactError = createAction('phonebook/deleteContactError');\r\n\r\nconst changeFilter = createAction('phonebook/changeFilter');\r\n\r\nexport default { fetchContactsRequest, fetchContactsSuccess, fetchContactsError, addContactRequest, addContactSuccess, addContactError, deleteContactRequest, deleteContactSuccess, deleteContactError, changeFilter };\r\n\r\n","import axios from 'axios';\r\nimport {actions} from './'\r\n\r\nconst { fetchContactsRequest, fetchContactsSuccess, fetchContactsError, addContactRequest, addContactSuccess, addContactError, deleteContactRequest, deleteContactSuccess, deleteContactError } = actions;\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n\r\n    axios.get('/contacts').then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n    const contact = { name, number };\r\n  \r\n    dispatch(addContactRequest());\r\n\r\n    axios.post('/contacts', contact).then(({ data }) =>\r\n        dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    axios.delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(deleteContactSuccess(contactId)))\r\n        .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport default {fetchContacts, addContact, deleteContact}","import { createReducer, combineReducers } from '@reduxjs/toolkit'\r\nimport {actions} from './';\r\n\r\nconst { fetchContactsRequest, fetchContactsSuccess, fetchContactsError, addContactRequest, addContactSuccess, addContactError, deleteContactRequest, deleteContactSuccess, deleteContactError } = actions;\r\n\r\nconst contactsReducer = createReducer([], {\r\n    [fetchContactsSuccess]: (_, { payload }) => payload,\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload\r\n});\r\n\r\nconst loadingReducer = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false\r\n});\r\n\r\nconst reducer = combineReducers({\r\n  contacts: contactsReducer,\r\n  filter: filterReducer,\r\n  loading: loadingReducer\r\n});\r\n\r\nexport default reducer;","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getAllContacts = state => state.contacts;\r\nexport const getFilter = state => state.filter;\r\nexport const getLoader = state => state.loading;\r\n\r\nexport const getFilteredContacts = createSelector([getAllContacts, getFilter],\r\n    (contacts, filter) => {\r\n        return contacts.filter(({ name }) => name.toLowerCase().includes(filter.toLowerCase()));\r\n    });\r\n","import React, {Component} from 'react';\r\nimport ContactItem from '../ContactItem';\r\nimport PropTypes from 'prop-types';\r\nimport '../styles/base.scss'\r\nimport './ContactList.scss';\r\nimport { connect } from 'react-redux';\r\nimport {operations} from '../../redux'\r\nimport {getLoader, getFilteredContacts} from '../../redux/selectors'\r\n\r\nclass ContactsList extends Component {\r\n    static propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    onClick: PropTypes.func.isRequired\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.fetchContacts();\r\n    };\r\n    \r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isLoadingContacts && <h1>Loading...</h1>}\r\n                <ul className='contact-list'>\r\n                   {this.props.contacts.map(({id, name, number}) => {\r\n                       return (<li key={id} className='contact-item'><ContactItem\r\n                           name={name}\r\n                           number={number} />\r\n                          <button type='button' onClick={()=>{this.props.onClick(id)}} className='button contact-item__button'>Delete</button>\r\n                        </li>)\r\n                      })}\r\n               </ul>\r\n            </>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: getFilteredContacts(state),\r\n    isLoadingContacts: getLoader(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onClick: id => dispatch(operations.deleteContact(id)),\r\n    fetchContacts: () => dispatch(operations.fetchContacts())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactForm.scss'\r\nimport '../styles/base.scss';\r\nimport { connect } from 'react-redux';\r\nimport {operations} from '../../redux';\r\n\r\nclass ContactForm extends Component {\r\n    static propTypes = {\r\n       onSubmit: PropTypes.func.isRequired\r\n    };\r\n\r\n    state = {\r\n        name: '',\r\n        number: ''\r\n    };\r\n\r\n      handleChange = (e) => {\r\n         this.setState({ [e.currentTarget.name]: e.currentTarget.value });\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { name, number } = this.state;\r\n        if (name !== '' && number !== '') {\r\n             this.props.onSubmit(name, number);\r\n             this.reset();\r\n            return\r\n        };\r\n     alert ('Please fill empty fields')\r\n  };\r\n\r\n    reset() {\r\n        this.setState({ name: '', number: '' });\r\n  };\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className='contacts-form'>\r\n                <label className='label'>\r\n                    Name<input\r\n                        type=\"text\"\r\n                        value={this.state.name}\r\n                        onChange={this.handleChange}\r\n                        name=\"name\"\r\n                        className='input' />\r\n                </label>\r\n                <label className='label'>\r\n                    Number<input\r\n                        type=\"tel\"\r\n                        value={this.state.number}\r\n                        onChange={this.handleChange}\r\n                        name=\"number\"\r\n                    className='input'/>\r\n                </label>\r\n                <button type=\"submit\" className='button contacts-form__button'>Add contact</button>\r\n            </form>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) => dispatch(operations.addContact(name, number)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../styles/base.scss';\r\nimport { connect } from 'react-redux';\r\nimport {actions} from '../../redux';\r\nimport {getFilter} from '../../redux/selectors'\r\n\r\nconst Filter = ({value, onChange}) => {\r\n    return (\r\n        <label className='label'>\r\n            Find contact by name\r\n         <input\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={onChange}\r\n            className='input'/>\r\n        </label>\r\n    );\r\n};\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: getFilter(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(actions.changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import './App.css';\nimport React from 'react';\nimport ContactsList from \"./components/ContactsList\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\"\n\nconst App = () => (\n  <>\n    <h1>Phonebook</h1>\n    <ContactForm />\n    <h2>Contacts</h2>\n    <Filter />\n    <ContactsList />\n  </>);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {configureStore, getDefaultMiddleware,  } from '@reduxjs/toolkit';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport reducer from './' \r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  })\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'modern-normalize/modern-normalize.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      \n        <App />\n      \n    </Provider>\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}